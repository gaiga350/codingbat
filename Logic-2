"""
We want to make a row of bricks that is goal inches long.
We have a number of small bricks (1 inch each) and big bricks
(5 inches each). Return True if it is possible to make the goal
by choosing from the given bricks. This is a little harder than
it looks and can be done without any loops. See also: Introduction to MakeBricks
""" 
# Recursion depth limit
reached = False
def make_bricks(small,big,goal):
    global reached
    if goal==0:
        reached = True
    if small>0:
        make_bricks(small-1,big,goal-1)
    if big>0:
        make_bricks(small,big-1,goal-5)
    return reached

"""
Given 3 int values, a b c, return their sum. However, if one of
the values is the same as another of the values, it does not count towards the sum.
"""
def lone_sum(a, b, c):
    if a == b and b == c:
        return 0
    elif b == c:
        return a
    elif a == b:
        return c
    elif a == c:
        return b
    return a+b+c

"""
Given 3 int values, a b c, return their sum. However,
if one of the values is 13 then it does not count towards
the sum and values to its right do not count. So for example,
if b is 13, then both b and c do not count.
"""
def lucky_sum(a, b, c):
    index=-1
    abc = []
    abc.extend([a,b,c])
    try:
        index = abc.index(13)
    except:
        index=-1
    if index!=-1:
        return sum(abc[0:index])
    return sum(abc)

"""
Given 3 int values, a b c, return their sum. However, if any of the
values is a teen -- in the range 13..19 inclusive -- then that value
counts as 0, except 15 and 16 do not count as a teens. Write a separate
helper "def fix_teen(n):"that takes in an int value and returns that value
fixed for the teen rule. In this way, you avoid repeating the teen code 3
times (i.e. "decomposition"). Define the helper below and at the same indent
level as the main no_teen_sum().
"""
def no_teen_sum(a, b, c):
    return sum([x if x == 15 else x if x == 16 else 0 if 13 <= x else x for x in [a,b,c]])
    