"""
Given n of 1 or more, return the factorial of n, 
which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).
"""
def factorial(n):
    if n == 1:
        return 1
    return n*factorial(n-1)
"""
We have a number of bunnies and each bunny has two big floppy ears.
We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).
"""
def bunnyEars(bunnies):
    if bunnies == 0 :
        return 0
    return 2+bunnyEars(bunnies-1)

"""
The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition.
The first two values in the sequence are 0 and 1 (essentially 2 base cases).
Each subsequent value is the sum of the previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on.
Define a recursive fibonacci(n) method that returns the nth fibonacci number, with n=0 representing the start of the sequence.
"""
def fibonnaci(n):
    if n==0:
        return 0
    if n==1:
        return 1
    return fibonnaci(n-1)+fibonnaci(n-2)

"""
We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on.
Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows.
"""
def triangle(blocks):
    if blocks == 1:
        return 1
    return blocks+triangle(blocks-1)

"""
Given a non-negative int n, return the sum of its digits recursively (no loops).
Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).
"""
def sumDigits(n):
    if n == 0:
        return 0
    return n%10+sumDigits(n//10)

"""
Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops).
Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).
"""
def count7(n):
    total = 0
    if n == 0:
        return 0
    if n%10==7:
        total += 1
    return total+count7(n//10)

"""
Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another
8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6),
while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).
"""
def count8(n):
    total = 0
    if n == 0:
        return 0
    if n%10==8:
        total += 1
    return total+count8(n//10)